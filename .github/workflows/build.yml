---
name: Build

on:
  push:
    branches:
      - master
  pull_request:
  workflow_dispatch:

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [windows-latest, ubuntu-latest, macos-latest]
        fs-backend: [std, boost]
        package-manager: [conan, none]
        exclude:
          - os: windows-latest
            package-manager: none

      fail-fast: false

    steps:
      - id: filesystem-backend
        env:
          FS_BACKEND: ${{ matrix.fs-backend }}
        run: |
          if [ "$FS_BACKEND" = "boost" ]; then
            echo "use-boost-filesystem=1" > "$GITHUB_OUTPUT"
          else
            echo "use-boost-filesystem=0" > "$GITHUB_OUTPUT"
          fi
        shell: bash

      - id: package-manager
        env:
          PACKAGE_MANAGER: ${{ matrix.package-manager }}
        run: |
          if [ "$PACKAGE_MANAGER" = "conan" ]; then
            echo "use-conan=1" > "$GITHUB_OUTPUT"
            echo "toolchain-file=conan_toolchain.cmake" > "$GITHUB_OUTPUT"
          else
            echo "use-conan=0" > "$GITHUB_OUTPUT"
            echo "toolchain-file=" > "$GITHUB_OUTPUT"
          fi
        shell: bash

      - uses: actions/checkout@v3
        with:
          submodules: true

      - name: Setup environment (Shared)
        run: |
          mkdir build
        shell: bash

      - name: Setup environment (Ubuntu)
        if: startsWith(matrix.os, 'ubuntu')
        run: |
          echo "$HOME/.local/bin" >> "$GITHUB_PATH"

      - name: Setup environment (MacOS)
        if: startsWith(matrix.os, 'macos')
        run: |
          python3 -c "import site; print(site.USER_BASE + '/bin')" >> "$GITHUB_PATH"
        shell: bash

      - name: Setup environment (Windows)
        if: startsWith(matrix.os, 'windows')
        run: |
          python3 -c "import site; import sys; print(f'{site.USER_BASE}\\Python{sys.version_info.major}{sys.version_info.minor}\\Scripts')" >> "$GITHUB_PATH"
        shell: bash

      - name: Enable Developer Command Prompt
        if: startsWith(matrix.os, 'windows')
        uses: ilammy/msvc-dev-cmd@v1.12.1

      - name: Install shared dependencies (Ubuntu)
        if: startsWith(matrix.os, 'ubuntu')
        run: |
          sudo apt-get update
          sudo apt-get -y install gcc

      - name: Install Conan
        if: matrix.package-manager == 'conan'
        run: pip3 install --user conan
        shell: bash

      - name: Cache conan packages
        if: matrix.package-manager == 'conan'
        uses: actions/cache@v3
        with:
          key: ${{ runner.os }}-conan-${{ hashFiles('**/conanfile.txt') }}-20211205
          path: ~/.conan/

      - name: Cache conan packages (Windows, Part 2)
        if: startsWith(matrix.os, 'windows') && matrix.package-manager == 'conan'
        uses: actions/cache@v3
        with:
          key: ${{ runner.os }}-conan-root-${{ hashFiles('**/conanfile.txt') }}-20211205
          path: C:/.conan/

      - name: Install libraries (Ubuntu)
        if: startsWith(matrix.os, 'ubuntu') && matrix.package-manager == 'none'
        run: |
          sudo apt-get update
          sudo apt-get -y install libboost-dev libboost-system-dev libboost-filesystem-dev rapidjson-dev

      - name: Install libraries (MacOS)
        if: startsWith(matrix.os, 'macos') && matrix.package-manager == 'none'
        run: |
          brew install boost rapidjson
        shell: bash

      - name: Install dependencies with Conan
        if: matrix.package-manager == 'conan'
        run: |
          conan --version
          conan profile detect
          conan install --output-folder=. --build=missing -s build_type=Debug -pr:b=default ..
        shell: bash
        working-directory: build

      - name: Build
        run: |
          cmake \
              -DPAJLADA_SETTINGS_USE_BOOST_FILESYSTEM=${{ steps.filesystem-backend.outputs.use-boost-filesystem }} \
              -DPAJLADA_SETTINGS_USE_CONAN=${{ steps.package-manager.outputs.use-conan }} \
              -DPAJLADA_SETTINGS_BUILD_TESTS=On \
              -DCMAKE_TOOLCHAIN_FILE="${{ steps.package-manager.outputs.toolchain-file }}" \
              -DCMAKE_BUILD_TYPE=Debug \
              ..
          cmake --build . --config Debug --parallel
        shell: bash
        working-directory: build

      - name: Run tests
        run: ctest
        shell: bash
        working-directory: build
