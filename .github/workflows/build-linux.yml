---
name: Build Linux

on:
  push:
    branches:
      - master
  pull_request:
  workflow_dispatch:

concurrency:
  group: build-linux-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build:
    name: Build on ${{ matrix.os }} with ${{ matrix.compiler }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-20.04
            compiler: g++ # g++-9
          - os: ubuntu-20.04
            compiler: g++-10
          # clang-10 is disabled since it's not supported
          # - os: ubuntu-20.04
          #   compiler: clang # clang-10
          - os: ubuntu-20.04
            compiler: clang-11
          - os: ubuntu-20.04
            compiler: clang-12

          - os: ubuntu-22.04
            compiler: g++ # g++-11
            upload-coverage: true
          - os: ubuntu-22.04
            compiler: g++-12
          - os: ubuntu-22.04
            compiler: clang # clang-14
          - os: ubuntu-22.04
            compiler: clang-15

    steps:
      - uses: actions/checkout@v4
        with:
          submodules: true

      - name: Install compiler
        id: install_cc
        uses: rlalik/setup-cpp-compiler@master
        with:
          compiler: ${{ matrix.compiler }}

      - name: Setup environment (Shared)
        run: |
          mkdir build

      - name: Install system dependencies
        if: startsWith(matrix.os, 'ubuntu')
        run: |
          sudo apt-get update
          sudo apt-get -y install gcovr

      - name: Install library dependencies
        run: |
          sudo apt-get update
          sudo apt-get -y install rapidjson-dev

      - name: Build
        env:
          CC: ${{ steps.install_cc.outputs.cc }}
          CXX: ${{ steps.install_cc.outputs.cxx }}
        run: |
          cmake \
              -DPAJLADA_SETTINGS_COVERAGE=On \
              -DCMAKE_BUILD_TYPE=Debug \
              ../tests
          cmake --build . --config Debug --parallel
        working-directory: build

      - name: Run tests
        run: ctest
        working-directory: build

      - name: Generate coverage
        run: make coverage
        working-directory: build

      - name: Upload coverage reports to Codecov
        if: matrix.upload-coverage
        uses: codecov/codecov-action@v5.2.0
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          verbose: true
